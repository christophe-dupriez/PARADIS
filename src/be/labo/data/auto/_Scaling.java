package be.labo.data.auto;

import java.util.List;

import org.apache.cayenne.CayenneDataObject;

import be.labo.data.AuditScaling;
import be.labo.data.DataType;
import be.labo.data.Machine;
import be.labo.data.ScalingLine;
import be.labo.data.ScalingSubType;
import be.labo.data.SubType;

/**
 * Class _Scaling was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Scaling extends CayenneDataObject {

    public static final String DESCRIPTION_PROPERTY = "description";
    public static final String INTERPOLATION_PROPERTY = "interpolation";
    public static final String UNIT_PROPERTY = "unit";
    public static final String DATATYPES_PROPERTY = "datatypes";
    public static final String LINE_PROPERTY = "line";
    public static final String MACHINES_PROPERTY = "machines";
    public static final String SCALING_AUDIT_PROPERTY = "scalingAudit";
    public static final String SCALING_RAW_PROPERTY = "scalingRaw";
    public static final String SUBTYPES_PROPERTY = "subtypes";

    public static final String ID_PK_COLUMN = "id";

    public void setDescription(String description) {
        writeProperty(DESCRIPTION_PROPERTY, description);
    }
    public String getDescription() {
        return (String)readProperty(DESCRIPTION_PROPERTY);
    }

    public void setInterpolation(Byte interpolation) {
        writeProperty(INTERPOLATION_PROPERTY, interpolation);
    }
    public Byte getInterpolation() {
        return (Byte)readProperty(INTERPOLATION_PROPERTY);
    }

    public void setUnit(String unit) {
        writeProperty(UNIT_PROPERTY, unit);
    }
    public String getUnit() {
        return (String)readProperty(UNIT_PROPERTY);
    }

    @SuppressWarnings("unchecked")
    public List<DataType> getDatatypes() {
        return (List<DataType>)readProperty(DATATYPES_PROPERTY);
    }


    public void addToLine(ScalingLine obj) {
        addToManyTarget(LINE_PROPERTY, obj, true);
    }
    public void removeFromLine(ScalingLine obj) {
        removeToManyTarget(LINE_PROPERTY, obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<ScalingLine> getLine() {
        return (List<ScalingLine>)readProperty(LINE_PROPERTY);
    }


    @SuppressWarnings("unchecked")
    public List<Machine> getMachines() {
        return (List<Machine>)readProperty(MACHINES_PROPERTY);
    }


    public void addToScalingAudit(AuditScaling obj) {
        addToManyTarget(SCALING_AUDIT_PROPERTY, obj, true);
    }
    public void removeFromScalingAudit(AuditScaling obj) {
        removeToManyTarget(SCALING_AUDIT_PROPERTY, obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<AuditScaling> getScalingAudit() {
        return (List<AuditScaling>)readProperty(SCALING_AUDIT_PROPERTY);
    }


    public void addToScalingRaw(ScalingSubType obj) {
        addToManyTarget(SCALING_RAW_PROPERTY, obj, true);
    }
    public void removeFromScalingRaw(ScalingSubType obj) {
        removeToManyTarget(SCALING_RAW_PROPERTY, obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<ScalingSubType> getScalingRaw() {
        return (List<ScalingSubType>)readProperty(SCALING_RAW_PROPERTY);
    }


    public void addToSubtypes(SubType obj) {
        addToManyTarget(SUBTYPES_PROPERTY, obj, true);
    }
    public void removeFromSubtypes(SubType obj) {
        removeToManyTarget(SUBTYPES_PROPERTY, obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<SubType> getSubtypes() {
        return (List<SubType>)readProperty(SUBTYPES_PROPERTY);
    }


}
