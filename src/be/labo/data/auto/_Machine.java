package be.labo.data.auto;

import java.util.List;

import org.apache.cayenne.CayenneDataObject;

import be.labo.data.Assertion;
import be.labo.data.AuditMachine;
import be.labo.data.DataType;
import be.labo.data.Devicetype;
import be.labo.data.Graphplace;
import be.labo.data.NameMachine;
import be.labo.data.Network;
import be.labo.data.Place;
import be.labo.data.RawDataFields;
import be.labo.data.RawTableField;
import be.labo.data.Rawtables;
import be.labo.data.Scaling;
import be.labo.data.SubType;

/**
 * Class _Machine was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Machine extends CayenneDataObject {

    public static final String ACTIVE_PROPERTY = "active";
    public static final String DESCRIPTION_PROPERTY = "description";
    public static final String GSM_PROPERTY = "gsm";
    public static final String MACHINEMAC_PROPERTY = "machinemac";
    public static final String NETWORKRANK_PROPERTY = "networkrank";
    public static final String NODEID_PROPERTY = "nodeid";
    public static final String TIMESLOT_PROPERTY = "timeslot";
    public static final String ASSERTIONS_PROPERTY = "assertions";
    public static final String DATATYPES_PROPERTY = "datatypes";
    public static final String DEFAULTDATATYPES_PROPERTY = "defaultdatatypes";
    public static final String MACHINE_AUDIT_PROPERTY = "machineAudit";
    public static final String MACHINE_DEVICE_TYPE_PROPERTY = "machineDeviceType";
    public static final String MACHINE_GRAPH_PROPERTY = "machineGraph";
    public static final String MACHINE_NETWORK_PROPERTY = "machineNetwork";
    public static final String MACHINE_PLACE_PROPERTY = "machinePlace";
    public static final String MACHINE_RAW_TABLE_PROPERTY = "machineRawTable";
    public static final String MACHINE_SUB_TYPES_PROPERTY = "machineSubTypes";
    public static final String NAME_MACHINE_PROPERTY = "nameMachine";
    public static final String PLACES_PROPERTY = "places";
    public static final String RAWDATAFIELDS_PROPERTY = "rawdatafields";
    public static final String RAWTABLEFIELDS_PROPERTY = "rawtablefields";
    public static final String SCALINGS_PROPERTY = "scalings";

    public static final String ID_PK_COLUMN = "id";

    public void setActive(Boolean active) {
        writeProperty(ACTIVE_PROPERTY, active);
    }
    public Boolean getActive() {
        return (Boolean)readProperty(ACTIVE_PROPERTY);
    }

    public void setDescription(String description) {
        writeProperty(DESCRIPTION_PROPERTY, description);
    }
    public String getDescription() {
        return (String)readProperty(DESCRIPTION_PROPERTY);
    }

    public void setGsm(String gsm) {
        writeProperty(GSM_PROPERTY, gsm);
    }
    public String getGsm() {
        return (String)readProperty(GSM_PROPERTY);
    }

    public void setMachinemac(Integer machinemac) {
        writeProperty(MACHINEMAC_PROPERTY, machinemac);
    }
    public Integer getMachinemac() {
        return (Integer)readProperty(MACHINEMAC_PROPERTY);
    }

    public void setNetworkrank(Short networkrank) {
        writeProperty(NETWORKRANK_PROPERTY, networkrank);
    }
    public Short getNetworkrank() {
        return (Short)readProperty(NETWORKRANK_PROPERTY);
    }

    public void setNodeid(String nodeid) {
        writeProperty(NODEID_PROPERTY, nodeid);
    }
    public String getNodeid() {
        return (String)readProperty(NODEID_PROPERTY);
    }

    public void setTimeslot(Short timeslot) {
        writeProperty(TIMESLOT_PROPERTY, timeslot);
    }
    public Short getTimeslot() {
        return (Short)readProperty(TIMESLOT_PROPERTY);
    }

    @SuppressWarnings("unchecked")
    public List<Assertion> getAssertions() {
        return (List<Assertion>)readProperty(ASSERTIONS_PROPERTY);
    }


    public void addToDatatypes(DataType obj) {
        addToManyTarget(DATATYPES_PROPERTY, obj, true);
    }
    public void removeFromDatatypes(DataType obj) {
        removeToManyTarget(DATATYPES_PROPERTY, obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<DataType> getDatatypes() {
        return (List<DataType>)readProperty(DATATYPES_PROPERTY);
    }


    @SuppressWarnings("unchecked")
    public List<DataType> getDefaultdatatypes() {
        return (List<DataType>)readProperty(DEFAULTDATATYPES_PROPERTY);
    }


    public void addToMachineAudit(AuditMachine obj) {
        addToManyTarget(MACHINE_AUDIT_PROPERTY, obj, true);
    }
    public void removeFromMachineAudit(AuditMachine obj) {
        removeToManyTarget(MACHINE_AUDIT_PROPERTY, obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<AuditMachine> getMachineAudit() {
        return (List<AuditMachine>)readProperty(MACHINE_AUDIT_PROPERTY);
    }


    public void setMachineDeviceType(Devicetype machineDeviceType) {
        setToOneTarget(MACHINE_DEVICE_TYPE_PROPERTY, machineDeviceType, true);
    }

    public Devicetype getMachineDeviceType() {
        return (Devicetype)readProperty(MACHINE_DEVICE_TYPE_PROPERTY);
    }


    public void addToMachineGraph(Graphplace obj) {
        addToManyTarget(MACHINE_GRAPH_PROPERTY, obj, true);
    }
    public void removeFromMachineGraph(Graphplace obj) {
        removeToManyTarget(MACHINE_GRAPH_PROPERTY, obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Graphplace> getMachineGraph() {
        return (List<Graphplace>)readProperty(MACHINE_GRAPH_PROPERTY);
    }


    public void setMachineNetwork(Network machineNetwork) {
        setToOneTarget(MACHINE_NETWORK_PROPERTY, machineNetwork, true);
    }

    public Network getMachineNetwork() {
        return (Network)readProperty(MACHINE_NETWORK_PROPERTY);
    }


    public void setMachinePlace(Place machinePlace) {
        setToOneTarget(MACHINE_PLACE_PROPERTY, machinePlace, true);
    }

    public Place getMachinePlace() {
        return (Place)readProperty(MACHINE_PLACE_PROPERTY);
    }


    public void setMachineRawTable(Rawtables machineRawTable) {
        setToOneTarget(MACHINE_RAW_TABLE_PROPERTY, machineRawTable, true);
    }

    public Rawtables getMachineRawTable() {
        return (Rawtables)readProperty(MACHINE_RAW_TABLE_PROPERTY);
    }


    public void addToMachineSubTypes(SubType obj) {
        addToManyTarget(MACHINE_SUB_TYPES_PROPERTY, obj, true);
    }
    public void removeFromMachineSubTypes(SubType obj) {
        removeToManyTarget(MACHINE_SUB_TYPES_PROPERTY, obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<SubType> getMachineSubTypes() {
        return (List<SubType>)readProperty(MACHINE_SUB_TYPES_PROPERTY);
    }


    public void addToNameMachine(NameMachine obj) {
        addToManyTarget(NAME_MACHINE_PROPERTY, obj, true);
    }
    public void removeFromNameMachine(NameMachine obj) {
        removeToManyTarget(NAME_MACHINE_PROPERTY, obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<NameMachine> getNameMachine() {
        return (List<NameMachine>)readProperty(NAME_MACHINE_PROPERTY);
    }


    public void addToPlaces(Place obj) {
        addToManyTarget(PLACES_PROPERTY, obj, true);
    }
    public void removeFromPlaces(Place obj) {
        removeToManyTarget(PLACES_PROPERTY, obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Place> getPlaces() {
        return (List<Place>)readProperty(PLACES_PROPERTY);
    }


    @SuppressWarnings("unchecked")
    public List<RawDataFields> getRawdatafields() {
        return (List<RawDataFields>)readProperty(RAWDATAFIELDS_PROPERTY);
    }


    @SuppressWarnings("unchecked")
    public List<RawTableField> getRawtablefields() {
        return (List<RawTableField>)readProperty(RAWTABLEFIELDS_PROPERTY);
    }


    @SuppressWarnings("unchecked")
    public List<Scaling> getScalings() {
        return (List<Scaling>)readProperty(SCALINGS_PROPERTY);
    }


}
