package be.labo.data.auto;

import java.util.List;

import org.apache.cayenne.CayenneDataObject;

import be.labo.data.DataType;
import be.labo.data.Machine;
import be.labo.data.Place;
import be.labo.data.RawTableField;
import be.labo.data.Scaling;
import be.labo.data.ScalingSubType;

/**
 * Class _SubType was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _SubType extends CayenneDataObject {

    public static final String ACTIVE_PROPERTY = "active";
    public static final String MAX_PROPERTY = "max";
    public static final String MIN_PROPERTY = "min";
    public static final String MIN1_PROPERTY = "min1";
    public static final String MIN2_PROPERTY = "min2";
    public static final String MIN3_PROPERTY = "min3";
    public static final String MIN4_PROPERTY = "min4";
    public static final String MIN5_PROPERTY = "min5";
    public static final String MIN6_PROPERTY = "min6";
    public static final String MIN7_PROPERTY = "min7";
    public static final String MIN8_PROPERTY = "min8";
    public static final String MIN9_PROPERTY = "min9";
    public static final String OWNER_PROPERTY = "owner";
    public static final String SCALINGS_PROPERTY = "scalings";
    public static final String SUBTYPE_FIELD_PROPERTY = "subtypeField";
    public static final String SUBTYPE_MACHINE_PROPERTY = "subtypeMachine";
    public static final String SUBTYPE_PLACE_PROPERTY = "subtypePlace";
    public static final String SUBTYPE_SCALING_PROPERTY = "subtypeScaling";

    public static final String ID_PK_COLUMN = "id";

    public void setActive(Boolean active) {
        writeProperty(ACTIVE_PROPERTY, active);
    }
    public Boolean getActive() {
        return (Boolean)readProperty(ACTIVE_PROPERTY);
    }

    public void setMax(Double max) {
        writeProperty(MAX_PROPERTY, max);
    }
    public Double getMax() {
        return (Double)readProperty(MAX_PROPERTY);
    }

    public void setMin(Double min) {
        writeProperty(MIN_PROPERTY, min);
    }
    public Double getMin() {
        return (Double)readProperty(MIN_PROPERTY);
    }

    public void setMin1(Double min1) {
        writeProperty(MIN1_PROPERTY, min1);
    }
    public Double getMin1() {
        return (Double)readProperty(MIN1_PROPERTY);
    }

    public void setMin2(Double min2) {
        writeProperty(MIN2_PROPERTY, min2);
    }
    public Double getMin2() {
        return (Double)readProperty(MIN2_PROPERTY);
    }

    public void setMin3(Double min3) {
        writeProperty(MIN3_PROPERTY, min3);
    }
    public Double getMin3() {
        return (Double)readProperty(MIN3_PROPERTY);
    }

    public void setMin4(Double min4) {
        writeProperty(MIN4_PROPERTY, min4);
    }
    public Double getMin4() {
        return (Double)readProperty(MIN4_PROPERTY);
    }

    public void setMin5(Double min5) {
        writeProperty(MIN5_PROPERTY, min5);
    }
    public Double getMin5() {
        return (Double)readProperty(MIN5_PROPERTY);
    }

    public void setMin6(Double min6) {
        writeProperty(MIN6_PROPERTY, min6);
    }
    public Double getMin6() {
        return (Double)readProperty(MIN6_PROPERTY);
    }

    public void setMin7(Double min7) {
        writeProperty(MIN7_PROPERTY, min7);
    }
    public Double getMin7() {
        return (Double)readProperty(MIN7_PROPERTY);
    }

    public void setMin8(Double min8) {
        writeProperty(MIN8_PROPERTY, min8);
    }
    public Double getMin8() {
        return (Double)readProperty(MIN8_PROPERTY);
    }

    public void setMin9(Double min9) {
        writeProperty(MIN9_PROPERTY, min9);
    }
    public Double getMin9() {
        return (Double)readProperty(MIN9_PROPERTY);
    }

    public void setOwner(DataType owner) {
        setToOneTarget(OWNER_PROPERTY, owner, true);
    }

    public DataType getOwner() {
        return (DataType)readProperty(OWNER_PROPERTY);
    }


    public void addToScalings(Scaling obj) {
        addToManyTarget(SCALINGS_PROPERTY, obj, true);
    }
    public void removeFromScalings(Scaling obj) {
        removeToManyTarget(SCALINGS_PROPERTY, obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Scaling> getScalings() {
        return (List<Scaling>)readProperty(SCALINGS_PROPERTY);
    }


    public void setSubtypeField(RawTableField subtypeField) {
        setToOneTarget(SUBTYPE_FIELD_PROPERTY, subtypeField, true);
    }

    public RawTableField getSubtypeField() {
        return (RawTableField)readProperty(SUBTYPE_FIELD_PROPERTY);
    }


    public void setSubtypeMachine(Machine subtypeMachine) {
        setToOneTarget(SUBTYPE_MACHINE_PROPERTY, subtypeMachine, true);
    }

    public Machine getSubtypeMachine() {
        return (Machine)readProperty(SUBTYPE_MACHINE_PROPERTY);
    }


    public void setSubtypePlace(Place subtypePlace) {
        setToOneTarget(SUBTYPE_PLACE_PROPERTY, subtypePlace, true);
    }

    public Place getSubtypePlace() {
        return (Place)readProperty(SUBTYPE_PLACE_PROPERTY);
    }


    public void addToSubtypeScaling(ScalingSubType obj) {
        addToManyTarget(SUBTYPE_SCALING_PROPERTY, obj, true);
    }
    public void removeFromSubtypeScaling(ScalingSubType obj) {
        removeToManyTarget(SUBTYPE_SCALING_PROPERTY, obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<ScalingSubType> getSubtypeScaling() {
        return (List<ScalingSubType>)readProperty(SUBTYPE_SCALING_PROPERTY);
    }


}
